# At first I thought about using git log CLI, as it was seeming comfortable enough to fetch the data
# on commits by concrete authors etc.
# However, I did not choose this method in the end, because it was not efficient enough
# in terms of collecting information on lines added/deleted in certain period.

# Following are the several commands with git log CLI from my draft:

# I. This command will save the data in json file in the following format:
#  YYYY-MM-DD : {AuthorName}
#  № file changed, № insertion(+), № deletion(-)

    git log --pretty=format:"%ad : %Cblue{%an} " --date=short --shortstat > COMMITS.json

# II. This command will save the data in json file in the following format:
#Commit stats:
#- Files changed (total)..  62
#- Lines added (total)....  4932
#- Lines deleted (total)..  248
#- Total lines (delta)....  4684
#- Add./Del. ratio (1:n)..  1 : 0.0502839

    git log --shortstat --author="AuthorName" | grep -E "fil(e|es) changed" | awk
    '{files+=$1; inserted+=$4; deleted+=$6; delta+=$4-$6; ratio=deleted/inserted} END
    {printf "Commit stats:\n- Files changed (total)..  %s\n- Lines added (total)....  %s\n- Lines deleted (total)..
    %s\n- Total lines (delta)....  %s\n- Add./Del. ratio (1:n)..  1 : %s\n", files, inserted, deleted, delta, ratio }'


# After doing more research, I found the Mergestat-lite tool for command line.
# mergestat is a CLI for querying git repositories with SQL, using SQLite virtual tables.
# I used the following command to extract a database file, which you can see in this branch.

    mergestat export /Users/Yeva/project3/commits_libgit2.db -e commits -e "SELECT * FROM commits" -e stats -e
    "SELECT commits.hash, stats.* FROM commits, stats('', commits.hash)" -r /Users/Yeva/libgit2
